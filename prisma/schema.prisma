// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole? @default(ADMIN)

  boards  Boards[]
  columns Columns[]
  tasks   Tasks[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Boards {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  columns   Columns[]
  tasks     Tasks[]

  @@index([userId])
}

model Columns {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  color String

  boardId String @db.ObjectId
  board   Boards @relation(fields: [boardId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tasks     Tasks[]
  subtasks  Subtasks[]
  User      User?      @relation(fields: [userId], references: [id])
  userId    String?    @db.ObjectId

  @@index([boardId])
}

model Tasks {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  status      String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  boardId String @db.ObjectId
  board   Boards @relation(fields: [boardId], references: [id], onDelete: Cascade)

  columnId String  @db.ObjectId
  column   Columns @relation(fields: [columnId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  subtasks  Subtasks[]

  @@index([boardId])
  @@index([userId])
  @@index([columnId])
}

model Subtasks {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  completed Boolean

  taskId String @db.ObjectId
  task   Tasks  @relation(fields: [taskId], references: [id], onDelete: Cascade)

  columnId String  @db.ObjectId
  column   Columns @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([columnId])
}
